SYSTEM OVERVIEW

I created a 2D space shooter game using the Bevy game engine. It consists of several systems that handle different aspects 
of the game, including player ship movement, enemy ship spawning, laser shooting, collision detection, explosions, and 
game over conditions.


FILE STRUCTURE

The code is organized into multiple files, each responsible for a specific aspect of the game. Here is an 
overview of the files and their contents:

    * main.rs: Contains the entry point of the application and sets up the game by adding plugins, systems, and event handlers.

    * allstructs.rs: Defines various components and events used in the game.

    * player.rs: Contains systems related to player ship movement and shooting lasers.

    * enemy.rs: Contains systems related to enemy ship spawning and shooting lasers.

    * laser.rs: Contains a system related to laser movement.

    * collision.rs: Contains systems related to collision detection between different entities.

    * explosion.rs: Contain a system related to creating and animating explosions.

    * gameover.rs: Manages the game over event when the player dies.


ASSETS

In my game, several assets are used to create an immersive and visually appealing experience. The following 
assets have been incorporated:

    * Background: The background asset represents the visually captivating image or scenery that serves as the backdrop for the 
      game. It provides an immersive environment and sets the overall tone and atmosphere of the gameplay. In addition, this 
      specific asset folder consists of a game over image which goes live after the player is dead

    * Sprites: The game features a variety of sprite images that represent player ships, enemy ships, projectiles, and other 
      elements within the game world. These sprites are carefully designed to provide a distinct visual style and 
      enhance the gameplay.

    * Sounds: To enrich the audio experience, the game includes a range of sound effects such as laser blasts, 
      and explosions. These sound effects help to immerse the players in the game's action and provide auditory feedback 
      for their actions. Additionally, audio cues are triggered at the beginning and conclusion of the game to 
      enhance the overall gaming experience.


COMPONENTS

The code uses various components to attach data to entities. Here are the components used:

    * PlayerShip: Contains data related to the player ship, including its speed, movement range, health, and score.

    * EnemyShip: Marks an entity as an enemy ship.

    * PlayerLaser: Marks an entity as a laser shot by the player ship.

    * Velocity: Contains the velocity vector of an entity, used for movement.

    * PlayerShootLaserState: Represents the state of the player ship's laser shooting action. It keeps track of 
      whether the spacebar has been pressed.

    * EnemyLaser: Marks an entity as a laser shot by an enemy ship.

    * Explosion: Marks an entity as an explosion effect.

    * ExplosionTimer: Contains a timer to control the duration of the explosion animation.


EVENTS

My game uses events to communicate between systems and trigger specific actions. Here are the events used:

    * CollisionEvent: Contains information about a collision between any ship and laser in the game world. It includes 
      the entities involved in the collision and the position of the explosion effect.

    * GameOverEvent: Indicates that the game is over when the player dies.


SYSTEMS

The game functionality is implemented using a series of systems that run in the game loop. Here is an overview of 
each system:

    * setup_game (startup system): Sets up the initial game state, including spawning the camera, background image, 
      player's ship, and playing the game opener sound.

    * playership_movement_system: Handles the movement of the player ship based on keyboard input. It updates the 
      ship's position within the window and handles wrapping around the edges.

    * player_shoot_laser_system: Allows the player ship to shoot lasers when the spacebar key is pressed. It creates 
      laser entities with appropriate transformations and velocities.

    * spawn_enemyships: Spawns enemy ships at regular intervals. It randomly generates their positions and checks 
      for collisions with existing enemy ships before spawning.

    * enemy_shoot_laser_system: Enables enemy ships to shoot lasers at regular intervals. It creates laser entities 
      with appropriate transformations and velocities.

    * laser_movement_system: Moves lasers vertically based on their velocity. It updates their positions in the game world.

    * playerlaser_enemyship_collision_system: Handles collision detection between player lasers and enemy ships. It checks 
      for collisions, triggers explosions/plays explosion sound, updates the player's score, and despawns the laser and 
      enemy ship entities.

    * enemylaser_playership_collision_system: Handles collision detection between enemy lasers and the player ship. It triggers 
      explosions/plays explosion sound, updates the player's health, despawns the laser entity, and handles game over 
      conditions if the player's health reaches zero plus play the game over sound.

    * explosion_system: Handles the creation and animation of explosion effects when collisions occur. It spawns explosion 
      entities and despawns them after a certain duration.

    * game_over_system: Handles the game over event, displays a game over image, and closes the application after a 
      specified duration.


HELPER FUNCTIONS

Here are helper functions which I used for different collision check purposes:

    * enemyships_collision_check: Checks to see if a new position of an enemy ship that is about to spawn would 
      result in a collision with any existing enemy ship in the game world. 

    * laser_collides_with_ship: Checks if a laser fired by either the player or enemy collides with any ship in the game. 


VIDEO DEMONSTRATION

Here is a link to a video demonstration of my game:

    * https://www.youtube.com/watch?v=D3mNBWfwQow